N-Puzzle

一、问题描述：

       八数码问题也称为九宫问题。在3×3的棋盘，摆有八个棋子，每个棋子上标有1至8的某一数字，不同棋子上标的数字不相同。
棋盘上还有一个空格，与空格相邻的棋子可以移到空格中。
       要求解决的问题是：给出一个初始状态，分别生成 8，15， 24-Puzzle 的可解初始状态各 1000 个。各取 3 个初始状态，打
印该状态及其后续状态。空格处用#表示，个位数中间对齐，两位数左对齐。
       所谓问题的一个状态就是棋子在棋盘上的一种摆法。解八数码问题实际上就是找出从初始状态到达目标状态所经过的一系列
中间过渡状态。

二、思路：

       八数码有解的充要条件是：
    （1）N为奇数时，奇偶同性可互达； 
    （2）N为偶数是，逆序数加上空格所在行距空格目标所在行的距离之和要和目标状态同奇偶。

       首先选择一种数据结构LinkedList，存放每个状态，随机生成状态，并对每个状态判断是否可解，若不可解，舍弃；
否则，继续生成知道生成1000个可解初始状态为止。
       打印三个初始状态的后续状态的函数为moveList()，按上下左右四个方向移动0的位置，若0在方阵边界则要判断是
否出界，移动之后的状态还是存入LinkList中，最后用printList()函数将其打印。

三、项目框架：

       项目共包含了三个部分：move.java、printList.java和puzzle.java。
       move.java：实现三个初始状态的移动，返回0移动上下左右方向后的后续状态，并将其打印出来。
       printList.java：打印要求格式的状态，以矩阵输出，将0变成#，个位数中间对齐，两位数左对齐。
       puzzle.java：接受输入8，15或者24，并根据输入进行后续操作；
                           包含主函数，找0位置的函数getLocate（）和计算逆序数的函数getInverseNum（）；
                           随机生成可解的一千种初始状态，并将其输出，并将三个初始状态的后续状态打印。
   
       //计算逆序数
	public static int getInverseNum(LinkedList puzzle) {
		int num = 0;
		for (int i = 1; i < puzzle.size(); i++) {
			for (int j = 0; j < i; j++) {
				if ((int) puzzle.get(j) < (int) puzzle.get(i))
					num++;
			}
		}
		return num;
	}
       // 得到0所在位置
	public static int getLocate(LinkedList puzzle) {
		int loc = 0;
		for (int i = 0; i < puzzle.size(); i++) {
			if ((int) puzzle.get(i) == 0) {
				loc = i;
				break;
			}
		}
		return loc;
	}
       //打印后续状态
        public void printList(LinkedList puzzle) {
		puzzle p = new puzzle();
		int h, l;
    	int n = p.getLocate(puzzle);
    	int length = puzzle.size();
    	if(length == 9) {
    		h = n/3;
    		l = n%3;
    		System.out.println("+---+---+---+");
    		for(int i = 0; i < length; i++) {
    			if((int)puzzle.get(i) == 0)
    				System.out.print("| # ");
    			else
    				System.out.print("| " + puzzle.get(i) + " ");
    			if(((i + 1) % 3 == 0))
    				System.out.println("|");
    		}
    		System.out.println("+---+---+---+");
    	}
        // 洗牌
        while (n != 0) {
	 int k = 1;
                 LinkedList shuffled8 = new LinkedList();
		if (n == 8) {
			while (k < 1001) {
				while (shuffled8.size() < puzzle9.size()) {
					Random x = new Random();
					int puz = (int) puzzle9.get(x.nextInt(puzzle9.size()));
					if (!shuffled8.contains(puz)) {
						shuffled8.add(puz);
					}
				}
				sum = shuffled8.toString();
				int flag = 0;
				sig = getInverseNum(shuffled8) + 2 - getLocate(shuffled8)/3;
				for (int m = 0; m < sign8.length; m++) {
					if (sign8[m] == sum) {
						flag = 1;
						break;
					}
				}
                      .........

四、运行结果：

请选择： 8-puzzle,15-puzzle,24-puzzle(输入8,15或24，输入0结束)
8
洗牌后：[8, 4, 1, 0, 7, 3, 6, 5, 2]
洗牌后：[3, 0, 4, 5, 2, 8, 6, 1, 7]
.....
洗牌后：[8, 4, 0, 6, 7, 3, 2, 5, 1]
洗牌后：[1, 0, 2, 4, 5, 3, 7, 6, 8]
原状态：
+---+---+---+
| 4 | 5 | # |
| 1 | 6 | 2 |
| 8 | 3 | 7 |
+---+---+---+
**************后续状态：
+---+---+---+
| 4 | 5 | 2 |
| 1 | 6 | # |
| 8 | 3 | 7 |
+---+---+---+
+---+---+---+
| 4 | # | 5 |
| 1 | 6 | 2 |
| 8 | 3 | 7 |
+---+---+---+
********************
原状态：
+---+---+---+
| 4 | 2 | # |
| 6 | 1 | 7 |
| 5 | 3 | 8 |
+---+---+---+
**************后续状态：
+---+---+---+
| 4 | 2 | 7 |
| 6 | 1 | # |
| 5 | 3 | 8 |
+---+---+---+
+---+---+---+
| 4 | # | 2 |
| 6 | 1 | 7 |
| 5 | 3 | 8 |
+---+---+---+
********************
原状态：
+---+---+---+
| 6 | 2 | # |
| 1 | 4 | 5 |
| 7 | 8 | 3 |
+---+---+---+
**************后续状态：
+---+---+---+
| 6 | 2 | 5 |
| 1 | 4 | # |
| 7 | 8 | 3 |
+---+---+---+
+---+---+---+
| 6 | # | 2 |
| 1 | 4 | 5 |
| 7 | 8 | 3 |
+---+---+---+
********************
请选择： 8-puzzle,15-puzzle,24-puzzle(输入8,15或24，输入0结束)
15
洗牌后：[13, 8, 9, 11, 6, 15, 12, 4, 3, 5, 7, 14, 2, 1, 0, 10]
洗牌后：[12, 7, 15, 13, 0, 5, 11, 3, 1, 10, 4, 8, 14, 6, 9, 2]
......
洗牌后：[8, 0, 2, 14, 3, 1, 13, 7, 6, 4, 9, 5, 10, 12, 11, 15]
洗牌后：[12, 7, 2, 8, 5, 9, 6, 0, 10, 15, 13, 3, 1, 14, 4, 11]
原状态：
+---+---+---+---+
| 8 | 5 |13 |12 |
|11 | 3 | # |15 |
|14 | 2 | 4 | 1 |
| 9 | 7 | 6 |10 |
+---+---+---+---+
**************后续状态：
+---+---+---+---+
| 8 | 5 | # |12 |
|11 | 3 |13 |15 |
|14 | 2 | 4 | 1 |
| 9 | 7 | 6 |10 |
+---+---+---+---+
+---+---+---+---+
| 8 | 5 |13 |12 |
|11 | 3 | 4 |15 |
|14 | 2 | # | 1 |
| 9 | 7 | 6 |10 |
+---+---+---+---+
+---+---+---+---+
| 8 | 5 |13 |12 |
|11 | # | 3 |15 |
|14 | 2 | 4 | 1 |
| 9 | 7 | 6 |10 |
+---+---+---+---+
+---+---+---+---+
| 8 | 5 |13 |12 |
|11 | 3 |15 | # |
|14 | 2 | 4 | 1 |
| 9 | 7 | 6 |10 |
+---+---+---+---+
********************
原状态：
+---+---+---+---+
|12 | 3 |13 | 5 |
| # | 8 |11 |15 |
| 4 | 6 |14 | 7 |
| 2 | 1 | 9 |10 |
+---+---+---+---+
**************后续状态：
+---+---+---+---+
| # | 3 |13 | 5 |
|12 | 8 |11 |15 |
| 4 | 6 |14 | 7 |
| 2 | 1 | 9 |10 |
+---+---+---+---+
+---+---+---+---+
|12 | 3 |13 | 5 |
| 4 | 8 |11 |15 |
| # | 6 |14 | 7 |
| 2 | 1 | 9 |10 |
+---+---+---+---+
+---+---+---+---+
|12 | 3 |13 | 5 |
| 8 | # |11 |15 |
| 4 | 6 |14 | 7 |
| 2 | 1 | 9 |10 |
+---+---+---+---+
********************
原状态：
+---+---+---+---+
|13 |12 | 1 | # |
| 4 | 8 | 7 |14 |
| 6 | 9 |10 |11 |
| 2 | 5 |15 | 3 |
+---+---+---+---+
**************后续状态：
+---+---+---+---+
|13 |12 | 1 |14 |
| 4 | 8 | 7 | # |
| 6 | 9 |10 |11 |
| 2 | 5 |15 | 3 |
+---+---+---+---+
+---+---+---+---+
|13 |12 | # | 1 |
| 4 | 8 | 7 |14 |
| 6 | 9 |10 |11 |
| 2 | 5 |15 | 3 |
+---+---+---+---+
********************
请选择： 8-puzzle,15-puzzle,24-puzzle(输入8,15或24，输入0结束)
24
洗牌后：[0, 24, 1, 8, 6, 10, 22, 3, 11, 4, 23, 9, 2, 7, 5, 18, 20, 14, 15, 21, 17, 16, 19, 12, 13]
洗牌后：[21, 23, 18, 24, 4, 13, 2, 15, 7, 5, 16, 6, 1, 20, 3, 9, 22, 8, 0, 11, 17, 14, 19, 12, 10]
.....
洗牌后：[16, 20, 18, 17, 2, 6, 4, 21, 10, 1, 0, 11, 15, 19, 8, 3, 13, 22, 9, 7, 23, 5, 12, 24, 14]
洗牌后：[24, 15, 18, 9, 3, 2, 22, 6, 21, 0, 8, 11, 10, 4, 16, 17, 20, 23, 19, 13, 5, 12, 14, 1, 7]
原状态：
+---+---+---+---+---+
| 1 | 9 |12 |21 |22 |
| 2 |16 |14 |10 | 3 |
|15 | 4 |20 |19 | 6 |
|13 |17 | 8 | # | 5 |
|23 |24 | 7 |11 |18 |
+---+---+---+---+---+
**************后续状态：
+---+---+---+---+---+
| 1 | 9 |12 |21 |22 |
| 2 |16 |14 |10 | 3 |
|15 | 4 |20 | # | 6 |
|13 |17 | 8 |19 | 5 |
|23 |24 | 7 |11 |18 |
+---+---+---+---+---+
+---+---+---+---+---+
| 1 | 9 |12 |21 |22 |
| 2 |16 |14 |10 | 3 |
|15 | 4 |20 |19 | 6 |
|13 |17 | 8 |11 | 5 |
|23 |24 | 7 | # |18 |
+---+---+---+---+---+
+---+---+---+---+---+
| 1 | 9 |12 |21 |22 |
| 2 |16 |14 |10 | 3 |
|15 | 4 |20 |19 | 6 |
|13 |17 | # | 8 | 5 |
|23 |24 | 7 |11 |18 |
+---+---+---+---+---+
+---+---+---+---+---+
| 1 | 9 |12 |21 |22 |
| 2 |16 |14 |10 | 3 |
|15 | 4 |20 |19 | 6 |
|13 |17 | 8 | 5 | # |
|23 |24 | 7 |11 |18 |
+---+---+---+---+---+
********************
原状态：
+---+---+---+---+---+
|23 | 8 | 1 |20 |22 |
|10 |14 |16 |13 |11 |
|21 |15 | 2 |19 | 7 |
|17 | 5 |12 | 6 | 9 |
| 4 |18 | # |24 | 3 |
+---+---+---+---+---+
**************后续状态：
+---+---+---+---+---+
|23 | 8 | 1 |20 |22 |
|10 |14 |16 |13 |11 |
|21 |15 | 2 |19 | 7 |
|17 | 5 | # | 6 | 9 |
| 4 |18 |12 |24 | 3 |
+---+---+---+---+---+
+---+---+---+---+---+
|23 | 8 | 1 |20 |22 |
|10 |14 |16 |13 |11 |
|21 |15 | 2 |19 | 7 |
|17 | 5 |12 | 6 | 9 |
| 4 | # |18 |24 | 3 |
+---+---+---+---+---+
+---+---+---+---+---+
|23 | 8 | 1 |20 |22 |
|10 |14 |16 |13 |11 |
|21 |15 | 2 |19 | 7 |
|17 | 5 |12 | 6 | 9 |
| 4 |18 |24 | # | 3 |
+---+---+---+---+---+
********************
原状态：
+---+---+---+---+---+
|17 | 4 | # |22 |23 |
|11 |20 |14 | 9 |16 |
|21 |24 |18 | 5 | 8 |
| 7 | 1 |10 | 2 |19 |
| 3 |15 | 6 |13 |12 |
+---+---+---+---+---+
**************后续状态：
+---+---+---+---+---+
|17 | 4 |14 |22 |23 |
|11 |20 | # | 9 |16 |
|21 |24 |18 | 5 | 8 |
| 7 | 1 |10 | 2 |19 |
| 3 |15 | 6 |13 |12 |
+---+---+---+---+---+
+---+---+---+---+---+
|17 | # | 4 |22 |23 |
|11 |20 |14 | 9 |16 |
|21 |24 |18 | 5 | 8 |
| 7 | 1 |10 | 2 |19 |
| 3 |15 | 6 |13 |12 |
+---+---+---+---+---+
+---+---+---+---+---+
|17 | 4 |22 | # |23 |
|11 |20 |14 | 9 |16 |
|21 |24 |18 | 5 | 8 |
| 7 | 1 |10 | 2 |19 |
| 3 |15 | 6 |13 |12 |
+---+---+---+---+---+
********************
